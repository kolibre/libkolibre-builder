Index: build/libxml2-2.7.8/HTMLparser.c
===================================================================
--- build.orig/libxml2-2.7.8/HTMLparser.c	2012-08-29 10:06:10.000000000 +0300
+++ build/libxml2-2.7.8/HTMLparser.c	2012-08-29 15:03:06.000000000 +0300
@@ -3317,6 +3317,54 @@
     return(0);
 }
 
+/**
+ * htmlParseInternalSubset:
+ * @ctxt:  an HTML parser context
+ *
+ * parse the internal subset declaration
+ *
+ * [28 end] ('[' (markupdecl | PEReference | S)* ']' S?)? '>'
+ */
+
+static void
+htmlParseInternalSubset(htmlParserCtxtPtr ctxt) {
+    /*
+     * Is there any DTD definition ?
+     */
+    if (RAW == '[') {
+        ctxt->instate = XML_PARSER_DTD;
+        NEXT;
+	/*
+	 * Parse the succession of Markup declarations and
+	 * PEReferences.
+	 * Subsequence (markupdecl | PEReference | S)*
+	 */
+	while (RAW != ']') {
+	    const xmlChar *check = CUR_PTR;
+	    unsigned int cons = ctxt->input->consumed;
+
+	    SKIP_BLANKS;
+	    xmlParseMarkupDecl(ctxt);
+	    xmlParsePEReference(ctxt);
+
+	    /*
+	     * Pop-up of finished entities.
+	     */
+	    while ((RAW == 0) && (ctxt->inputNr > 1))
+		xmlPopInput(ctxt);
+
+	    if ((CUR_PTR == check) && (cons == ctxt->input->consumed)) {
+	    	htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,
+	    			"htmlParseInternalSubset: error detected in Markup declaration\n", NULL, NULL);
+		break;
+	    }
+	}
+	if (RAW == ']') {
+	    NEXT;
+	    SKIP_BLANKS;
+	}
+    }
+}
 
 /**
  * htmlParseDocTypeDecl:
@@ -3362,6 +3410,12 @@
     URI = htmlParseExternalID(ctxt, &ExternalID);
     SKIP_BLANKS;
 
+    if (RAW == '[') {
+	    ctxt->instate = XML_PARSER_DTD;
+	    htmlParseInternalSubset(ctxt);
+	    SKIP_BLANKS;
+	}
+
     /*
      * We should be at the end of the DOCTYPE declaration.
      */
